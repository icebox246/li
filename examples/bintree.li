alias node_t: pair int (pair node_t node_t)

fn gen_tree limit: int => node_t {
	fn gen_tree limit: int i: int => node_t {
		if i <= limit 
			return i, (gen_tree limit (i*2)), (gen_tree limit ((i*2) + 1))
	} 
	return gen_tree limit 1
}

fn print_spaces n: int => null
	if n > 0 {
		$ print " "
		$ print_spaces (n-1)
	}

fn print_tree tree: node_t => null {
	fn print_tree node: node_t depth: int => null
		if node != null {
			let v = fst node
			let l = fst snd node
			let r = snd snd node
			$ print_tree l (depth + 1)
			$ print_spaces (depth * 4)
			$ println v
			$ print_tree r (depth + 1)
		}
	$ print_tree tree 0
}

fn invert_tree node: node_t => node_t
	if node != null {
		let v = fst node
		let l = fst snd node
		let r = snd snd node
		return v, (invert_tree r), (invert_tree l)
	}

let tree = gen_tree 15
$ println "starting tree:"
$ print_tree tree

let inverted = invert_tree tree
$ println "inverted tree:"
$ print_tree inverted
